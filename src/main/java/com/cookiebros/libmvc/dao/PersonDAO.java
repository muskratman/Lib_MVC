package com.cookiebros.libmvc.dao;

import com.cookiebros.libmvc.models.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;

@Component
public class PersonDAO {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public PersonDAO(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /*
    CREATE TABLE Person(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fio varchar(255) UNIQUE,
    year_of_birth int CHECK (year_of_birth > 1900));

    INSERT INTO Person(fio, year_of_birth) VALUES ('Admin', 1901);
     */

    public List<Person> index() {
        return jdbcTemplate.query("SELECT * FROM Person WHERE id > 1", new BeanPropertyRowMapper<>(Person.class));
    }

    public Person show(int id) {
        return  jdbcTemplate.query("SELECT * FROM Person WHERE id=?", new Object[]{id},
                new BeanPropertyRowMapper<>(Person.class)).stream().findAny().orElse(null);
    }

    public Optional<Person> show(String fio) {
        return  jdbcTemplate.query("SELECT * FROM Person WHERE fio=?", new Object[]{fio},
                new BeanPropertyRowMapper<>(Person.class)).stream().findAny();
    }

    public void save(Person savedPerson) {
        jdbcTemplate.update("INSERT INTO Person(fio, year_of_birth) VALUES(?, ?)",
                savedPerson.getFio(),
                savedPerson.getYearOfBirth());
    }

    public void update(int id, Person updatedPerson) {
        jdbcTemplate.update("UPDATE Person SET fio=?, year_of_birth=? WHERE id=?",
                updatedPerson.getFio(),
                updatedPerson.getYearOfBirth(),
                id);
    }

    public void delete(int id) {
        jdbcTemplate.update("DELETE FROM Person WHERE id=?", id);
    }

}
package com.cookiebros.libmvc.dao;

import com.cookiebros.libmvc.models.Book;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;

@Component
public class BookDAO {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public BookDAO(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /*
    CREATE TABLE Book(
    book_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar(255),
    author varchar(255),
    year_of_publishing int CHECK (year_of_publishing > 1600),
    person_id int REFERENCES Person(person_id) ON DELETE SET NULL)


    "PRIMARY KEY(title, author, year_of_publishing))"
     */

    public List<Book> index() {
        return jdbcTemplate.query("SELECT * FROM Book", new BeanPropertyRowMapper<>(Book.class));
    }

    public Book show(int id) {
        return  jdbcTemplate.query("SELECT * FROM Book WHERE id=?", new Object[]{id},
                new BeanPropertyRowMapper<>(Book.class)).stream().findAny().orElse(null);
    }

    ////////////
    ////////////
    ////////////
    //////НЕ УВЕРЕН ЧТО ИМЕННО ТАК ДЕЛАЕТСЯ ПОИСК ПО НЕСКОЛЬКИМ ПОЛЯМ
    ////////////
    ////////////
    ////////////
    public Optional<Book> show(String title, String author, int yearOfPublishing) {
        return  jdbcTemplate.query("SELECT * FROM Book WHERE (title=?, author=?, year_of_publishing=?)",
                new Object[]{title, author, yearOfPublishing},
                new BeanPropertyRowMapper<>(Book.class)).stream().findAny();
    }

    public void save(Book savedBook) {
        jdbcTemplate.update("INSERT INTO Book(title, author, year_of_publishing, person_id) VALUES(?, ?, ?, 1)",
                savedBook.getTitle(),
                savedBook.getAuthor(),
                savedBook.getYearOfPublishing());
    }

    public void update(int id, Book updatedBook) {
        jdbcTemplate.update("UPDATE Book SET title=?, author=?, year_of_publishing=? WHERE id=?",
                updatedBook.getTitle(),
                updatedBook.getAuthor(),
                updatedBook.getYearOfPublishing(),
                id);
    }

    public void addOwner(int id, int personId) {
        jdbcTemplate.update("UPDATE Book SET person_id=? WHERE id=?",
                personId, id);
    }

    public void delete(int id) {
        jdbcTemplate.update("DELETE FROM Book WHERE id=?", id);
    }

    public List<Book> showReadersBooks(int readerId) {
        return  jdbcTemplate.query("SELECT * FROM Book WHERE person_id=?",
                new Object[]{readerId},
                new BeanPropertyRowMapper<>(Book.class));
    }
}